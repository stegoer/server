enum Channel {
  RED
  GREEN
  BLUE
  RED_GREEN
  RED_BLUE
  GREEN_BLUE
  RED_GREEN_BLUE
}

enum ImageOrderField {
  CREATED_AT
  UPDATED_AT
}

input ImageOrder {
  direction: OrderDirection!
  field: ImageOrderField
}

input EncodeImageInput {
  message: String!
  lsbUsed: Int!
  channel: Channel!
  file: Upload!
}

input DecodeImageInput {
  lsbUsed: Int!
  channel: Channel!
  file: Upload!
}

type Image implements Node {
  id: ID!
  message: String!
  lsbUsed: Int!
  channel: Channel!
  createdAt: Time!
  updatedAt: Time!
}

type ImageEdge {
  node: Image!
  cursor: Cursor!
}

type ImagesConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ImageEdge!]!
}

type EncodeImagePayload {
  image: Image!
  file: FileType!
}

type DecodeImagePayload {
  message: String!
}

extend type Query {
  images(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    where: ImageWhereInput
    orderBy: ImageOrder
  ): ImagesConnection!
}

extend type Mutation {
  encodeImage(input: EncodeImageInput!): EncodeImagePayload!
  decodeImage(input: DecodeImageInput!): DecodeImagePayload!
}
