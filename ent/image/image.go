// Code generated by entc, DO NOT EDIT.

package image

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/stegoer/server/ent/schema/ulid"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldLsbUsed holds the string denoting the lsb_used field in the database.
	FieldLsbUsed = "lsb_used"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the image in the database.
	Table = "images"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "images"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMessage,
	FieldLsbUsed,
	FieldChannel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// LsbUsedValidator is a validator for the "lsb_used" field. It is called by the builders before save.
	LsbUsedValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ID
)

// Channel defines the type for the "channel" enum field.
type Channel string

// Channel values.
const (
	ChannelRed          Channel = "RED"
	ChannelGreen        Channel = "GREEN"
	ChannelBlue         Channel = "BLUE"
	ChannelRedGreen     Channel = "RED_GREEN"
	ChannelRedBlue      Channel = "RED_BLUE"
	ChannelGreenBlue    Channel = "GREEN_BLUE"
	ChannelRedGreenBlue Channel = "RED_GREEN_BLUE"
)

func (c Channel) String() string {
	return string(c)
}

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c Channel) error {
	switch c {
	case ChannelRed, ChannelGreen, ChannelBlue, ChannelRedGreen, ChannelRedBlue, ChannelGreenBlue, ChannelRedGreenBlue:
		return nil
	default:
		return fmt.Errorf("image: invalid enum value for channel field: %q", c)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Channel) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(c.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Channel) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*c = Channel(str)
	if err := ChannelValidator(*c); err != nil {
		return fmt.Errorf("%s is not a valid Channel", str)
	}
	return nil
}
